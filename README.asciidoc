
# 文档
:sectnums:
:sectnumlevels: 5
:toc: right
:toc-title: {doctitle}
:toclevels: 5
:table-caption: {doctitle}.
:icons: font

## 背景说明

## 需求

### 选项配置化

安装的选项第一次询问后，后续不需要再次询问，记录配置。

用户可以通过参数控制是否重新询问安装选项。

所有的选项配置明确记录在配置里，不能有默认的配置不写。

### 指定运行某一些安装

### 可以反复运行

反复运行可能导致配置文件不完全一样，但是反复运行不会影响最终的结果。

反复运行也不会导致冲突。

### 结果展示

最后需要展示安装的结果。

安装了哪些模块，这些模块都依赖哪些模块。


## 设计

### 语言

shell

### 功能依赖

每一个自定义的APP都需要定义 dependencies 和 features 列表。

注意 dependencies 和 features 并不是安装依赖，安装依赖有专门的包管理器进行处理（例如：pacman），它们是安装依赖的超集，可以理解为功能依赖。

dependencies 和 features：

1. 安装依赖
2. 功能依赖

dependencies 列表是当前APP依赖的APP列表，安装当前APP必须要安装 dependencies 列表里的APP，否则基本功能有问题。
当然安装依赖也可以写到dependencies中，例如包管理器虽然处理了依赖，但是依赖的APP需要自定义配置。

features 列表是当前APP功能扩展的APP列表，安装当前APP不需要安装它们也可以正常使用，但是如果需要它们提供的额外的功能，就需要安装。

例如一个应用的插件，就应该列到 features 里。

但是 features 里的应用并不一定依赖当前APP，例如：zsh的features里有pkgfile用于提供 command not found 的功能，但是 pkgfile 并不依赖 zsh。pkgfile 是一个相对独立的应用。

它们的安装顺序是：

1. dependencies 里的所有应用
2. 应用本身
3. features 里的所有应用


## 问题记录

### pamac安装卡住

执行安装脚本，间歇性卡住。

每次卡住都是通过pamac安装应用时卡住。

卡住的子进程都是 `pkttyagent` 。这个进程是客户端向服务端 `polkitd` 获取权限。

后面排查发现是 pamac 获取锁失败。

```bash
sudo rm /var/lib/pacman/db.lck

```

当存在那个锁文件时，执行如下的脚本 `test.sh` 会有相同的现象。
当没有那个锁文件时，执行如下的脚本 `test.sh` 不会有问题。
```
#!/bin/bash
# test.sh

source ./lib/utils/all.sh

cmd::run_cmd_with_history pamac install --no-confirm pot-translation-bin || exit 1
cmd::run_cmd_with_history pamac install --no-confirm hyprpicker || exit 2

echo "all success"
```

查看有问题情况时执行的命令列表，使用 `pamac` 安装的应用只有 `pot-translation-bin` 和 `hyprpicker` ， `pot-translation-bin` 安装成功， `hyprpicker` 安装失败。

为什么执行 `test.sh` 又没有问题呢？？那么锁文件残留是谁残留的呢？？

目前还不确定，只能采用规避的手段。每次执行 `pacman` 和 `pamac` 时清理锁文件。

后面又遇到 `pamac` 安装应用的时候，卡在下载某个包了，看日志记录的 `pamac` 的安装输出，最后一条信息是下载某个包成功。
不知道接下来是下载其他的包卡住了还是执行什么操作。 `ps` 查看也只是输出 `restart_syscall` 。

后面使用yay安装就没有问题了。


### 卸载的问题

卸载一个应用时不能递归卸载其依赖的应用，因为依赖的引用可能还没其他应用依赖着。

如果卸载单个应用用于测试，最好是仅仅卸载自己就可以了。

如果卸载全部，可以按照安装的顺序依次卸载，如果一个应用被多个应用依赖，这个应用的安装肯定是在所有依赖应用的前面安装，所以卸载也是最后卸载的。

### 音频可视化

https://www.reddit.com/r/linux4noobs/comments/dk68v7/a_good_audio_visualizer_tool_for_linux/[有哪些音频可视化]

* https://github.com/dpayne/cli-visualizer[cli-visualizer] 支持颜色主题，可以配合 pywal 一起使用实现多变的颜色主题。[.red]#2018-10-8后就没有发布新版本了#。
* https://github.com/karlstav/cava?tab=readme-ov-file#configuration[cava] star数更多。截至目前（2024-4-17）发布频繁。
* https://github.com/jarcode-foss/glava[glava] X11的，没有试过wayland是否可以。

我目前选择的是 https://github.com/dpayne/cli-visualizer[cli-visualizer] 。

* cli-visualizer 单个音频柱子有不同的颜色，cava只有一种颜色。
* cava文档太简单了，都不知道配置项有哪些

## TODO

* [ ] 使用 https://github.com/charmbracelet/gum?tab=readme-ov-file#spin[gum spin] 来执行耗时的任务，避免假卡住的现象
* [*] pywal 的使用
* [*] hypridle 的使用
* [*] hyprlock 的使用
* [ ] hyprcursor 的使用
* [*] wlogout 的使用
* [ ] ags 的使用
* [ ] grub 主题美化
* [ ] https://github.com/dpayne/cli-visualizer[cli-visualizer] 的使用
* [ ] 修改默认的应用程序
* [ ] swaync 的样式没处理，字体也没处理
* [ ] 处理 tty 的字体和shell的美化问题

## 引用

https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html[Bash 文档]

https://www.gnu.org/software/bash/manual/bash.html[Bash Reference Manual]

https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/#links[asciidoc 文档]
